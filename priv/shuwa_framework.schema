{mapping, "shuwa.timezone", "shuwa_framework.timezone", [
     {default, +8},
     {datatype, integer}
]}.

%% @doc Node name
%{mapping, "node.name", "vm_args.-name", [
%  {default, "shuwa_iot@127.0.0.1"}
%]}.

%% @doc Secret cookie for distributed erlang node
%{mapping, "node.cookie", "vm_args.-setcookie", [
%  {default, "shuwasecretcookie"}
%]}.


%% @doc Global GC Interval
%% {@configurable}
{mapping, "gc.interval", "shuwa_framework.gc_interval", [
{default, "5m"},
{datatype, {duration, ms}}
]}.

%%--------------------------------------------------------------------
%% 监控配置
%%--------------------------------------------------------------------
{mapping, "monitor.ports", "shuwa_framework.monitor_ports", [
  {datatype, string}
]}.


%%--------------------------------------------------------------------
%% 阿里云配置
%%--------------------------------------------------------------------
{mapping, "aliyun.accessKeyId", "shuwa_framework.aliyun_accessKeyId", [
  {datatype, string}
]}.

{mapping, "aliyun.accessKeySecret", "shuwa_framework.aliyun_accessKeySecret", [
  {datatype, string}
]}.


%%--------------------------------------------------------------------
%% 阿里云oss
%%--------------------------------------------------------------------

{mapping, "aliyun.uploadCallbackUrl", "shuwa_framework.aliyun_uploadCallbackUrl", [
  {datatype, string}
]}.

{mapping, "aliyun.uploadHost", "shuwa_framework.aliyun_uploadHost", [
  {datatype, string}
]}.


%%--------------------------------------------------------------------
%% 腾讯短信配置
%%--------------------------------------------------------------------

{mapping, "tencent_sms.appid", "shuwa_framework.tencent_sms_appid", [
  {default, "1400214975"},
  {datatype, string}
]}.

{mapping, "tencent_sms.appkey", "shuwa_framework.tencent_sms_appkey", [
  {default, "25c8c3a4d17367a8232031ff54d114a2"},
  {datatype, string}
]}.


%%--------------------------------------------------------------------
%% 百度地图配置
%%--------------------------------------------------------------------

{mapping, "baidumap.appkey", "shuwa_framework.baidumap_appkey", [
{default, "fnc5Z92jC7CwfBGz8Dk66E9sXEIYZ6TG"},
{datatype, string}
]}.

%%--------------------------------------------------------------------
%% 友盟消息推送配置
%%--------------------------------------------------------------------

{mapping, "umeng.appkey", "shuwa_framework.umeng_appkey", [
{default, "5f8bfc1780455950e4ad0482"},
{datatype, string}
]}.

{mapping, "umeng.masterkey", "shuwa_framework.umeng_masterkey", [
{default, "ilkx2mnd2sc9u0t4h77qnx0bopy46bso"},
{datatype, string}
]}.

%%--------------------------------------------------------------------
%% 微信公众号
%%--------------------------------------------------------------------

{mapping, "wechat.appid", "shuwa_framework.wechat_appid", [
{default, "wxfb27e58a4c6b0784"},
{datatype, string}
]}.

{mapping, "wechat.secret", "shuwa_framework.wechat_secret", [
{default, "14a79843ec57d70ce23294f0ab6590ff"},
{datatype, string}
]}.

%%--------------------------------------------------------------------
%% Log
%%--------------------------------------------------------------------

{mapping, "logger.dir", "lager.log_root", [
  {default, "/var/log/shuwa_iot/"},
  {datatype, string}
]}.

{mapping, "logger.error.redirect", "lager.error_logger_redirect", [
  {default, on},
  {datatype, flag},
  hidden
]}.

{mapping, "logger.error.messages_per_second", "lager.error_logger_hwm", [
  {default, 1000},
  {datatype, integer},
  hidden
]}.

{mapping, "logger.console", "lager.handlers", [
  {default, file},
  {datatype, {enum, [off, file, console, both]}}
]}.

{mapping, "logger.console.level", "lager.handlers", [
  {default, info},
  {datatype, {enum, [debug, info, notice, warning, error, critical, alert, emergency, none]}}
]}.

{mapping, "logger.console.file", "lager.handlers", [
  {default, "console.log"},
  {datatype, file}
]}.

{mapping, "logger.console.size", "lager.handlers", [
  {default, 10485760},
  {datatype, integer}
]}.

{mapping, "logger.console.count", "lager.handlers", [
  {default, 5},
  {datatype, integer}
]}.

{mapping, "logger.console.save", "shuwa_framework.log_save_type", [
  {default, none},
  {datatype, {enum, [none, mqtt, db, kafka]}}
]}.

{mapping, "logger.info.file", "lager.handlers", [
  {datatype, file}
]}.

{mapping, "logger.info.size", "lager.handlers", [
  {default, 10485760},
  {datatype, integer}
]}.

{mapping, "logger.info.count", "lager.handlers", [
  {default, 5},
  {datatype, integer}
]}.

{mapping, "logger.error.file", "lager.handlers", [
  {default, "error.log"},
  {datatype, file}
]}.

{mapping, "logger.error.size", "lager.handlers", [
  {default, 10485760},
  {datatype, integer}
]}.

{mapping, "logger.error.count", "lager.handlers", [
  {default, 5},
  {datatype, integer}
]}.

{mapping, "logger.colored", "lager.colored", [
  {default, true},
  {datatype, atom}
]}.

{translation, "lager.colors",
 fun(Conf) ->
    [{debug,"\e[0;38m"},
     {info,"\e[1;37m"},
     {notice,"\e[1;36m"},
     {warning,"\e[1;33m"},
     {error,"\e[1;31m"},
     {critical,"\e[1;35m"},
     {alert,"\e[1;44m"},
     {emergency,"\e[1;41m"}
    ]
  end
}.

{translation, "lager.handlers",
 fun(Conf) ->
    ErrorHandler = case cuttlefish:conf_get("logger.error.file", Conf) of
        undefined ->
            [];
        ErrorFilename ->
            [{lager_file_backend, [
               {file, ErrorFilename},
               {level, error},
               {size, cuttlefish:conf_get("logger.error.size", Conf)},
               {date, "$D0"},
               {count, cuttlefish:conf_get("logger.error.count", Conf)}]}]
    end,
    InfoHandler = case cuttlefish:conf_get("logger.info.file", Conf, undefined) of
          undefined -> [];
          InfoFilename -> [{lager_file_backend,
             [
                {file, InfoFilename},
                {level, info},
                {size, cuttlefish:conf_get("logger.info.size", Conf)},
                {date, "$D0"},
                {count, cuttlefish:conf_get("logger.info.count", Conf)}
             ]}]
    end,
    ConsoleLogLevel = cuttlefish:conf_get("logger.console.level", Conf),
    ConsoleLogFile = cuttlefish:conf_get("logger.console.file", Conf),
    ConsoleHandler = {lager_console_backend, [ConsoleLogLevel, {lager_default_formatter, ["\033[36m", time, " [",severity,"] ", pid, "@", module, ":", function, ":", line, "\033[0m", color, " ", message, "\e[0m\r\n"]}]},
    ConsoleFileHandler = {lager_file_backend,
        [
            {file, ConsoleLogFile},
            {level, ConsoleLogLevel},
            {size, cuttlefish:conf_get("logger.console.size", Conf)},
            {date, "$D0"},
            {count, cuttlefish:conf_get("logger.console.count", Conf)}
        ]
    },
    ConsoleHandlers = case cuttlefish:conf_get("logger.console", Conf) of
          off -> [];
          file -> [ConsoleFileHandler];
          console -> [ConsoleHandler];
          both -> [ConsoleHandler, ConsoleFileHandler];
          _ -> []
    end,
    LoggerHandlers = [{shuwa_logger,
        [
           {level, ConsoleLogLevel}
        ]
    }],
    case cuttlefish:conf_get("logger.console", Conf) of
        off -> [];
        _ -> LoggerHandlers ++ ConsoleHandlers ++ ErrorHandler ++ InfoHandler
    end
  end
}.